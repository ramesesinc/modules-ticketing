import com.rameses.annotations.*;
import com.rameses.util.*;

class TicketingService {

	final String VAR_QR_TICKET_ROUTE_ID = 'qr_ticket_route_id'; 

	@DataContext('var')
	def em_var; 

	@DataContext('ticketing_route')
	def em_route; 

	@DataContext('ticket')
	def em_ticket; 

	@DataContext('ticketing_turnstile_item')
	def em_turnstile_item; 

	@Service('DateService') 
	def dateSvc; 

	@Service('QrCodeInfoService')
	def qrSvc;

	private def RET_CODES = [
		0  : [retcode:0,  message:'SUCCESS'], 
		1  : [retcode:1,  message:'General Error'], 
		2  : [retcode:2,  message:'Barcode does not exist'], 
		3  : [retcode:3,  message:'Barcode is invalid for this turnstile'], 
		4  : [retcode:4,  message:'Barcode has already been used'], 
		5  : [retcode:5,  message:'Invalid token id'], 
		6  : [retcode:6,  message:'Barcode has already been voided.'], 
		10 : [retcode:10, message:'Turnstile id does not exist'], 
		11 : [retcode:11, message:'Turnstile id is currently deactivated'] 
	]; 


	@ProxyMethod 
	public def verify( params ) {
		// params contains: id, barcode
		try { 
			if ( !params.id ) return RET_CODES[10]; 

			boolean is_qr = ( params.qr.toString() == '1' );
			def barcode = ( is_qr ? params.data : params.barcode );
			
			if ( !barcode ) return RET_CODES[2]; 

			def machinfo = em_turnstile_item.findTurnstile([ turnstileid: params.id ]); 
			if ( !machinfo ) return RET_CODES[10]; 

			if ( is_qr ) { 
				// 
				// handle the QRCode data from barcode 
				// 
				def qr = qrSvc.decode([ data: barcode ]); 
				if ( !qr?.objid ) throw new Exception('objid  is required in QR data'); 
				if ( !qr?.barcode ) throw new Exception('barcode  is required in QR data'); 

				if ( qr.route?.objid ) {
					def var = em_var.find([ name: VAR_QR_TICKET_ROUTE_ID ]).first();
					def mainrouteid = var?.value; 
					if ( !mainrouteid ) 
						throw new Exception( VAR_QR_TICKET_ROUTE_ID +"  variable must be set"); 

					def mainroute = em_route.find([ objid: mainrouteid ]).first(); 
					if ( !mainroute ) 
						throw new Exception("'"+ mainrouteid +"' main route record not found"); 

					if ( !mainrouteid.equalsIgnoreCase( qr.route.objid )) 
						throw new Exception("This ticket is not allowed in this terminal"); 
				}

				// persist the data if not exist
				def tk = em_ticket.find([ objid: qr.objid ]).select('objid').first(); 
				if ( !tk ) em_ticket.create( tk ); 

				barcode = qr.barcode; 
			}

			def tkinfo = em_ticket.findBarcode([ barcode: barcode, turnstileid: params.id ]); 
			if ( !tkinfo ) return RET_CODES[2]; 
			if ( tkinfo.dtused ) return RET_CODES[4]; 
			if ( tkinfo.voided == 1 ) return RET_CODES[6];

			if ( tkinfo.tag == tkinfo.categoryid ) {
				def tokenid = KeyGen.newProvider().generateRandomKey( null ); 
				em_ticket.updateToken([ tokenid: tokenid, barcode: barcode ]);  

				def resp = [:]; 
				resp.putAll( RET_CODES[0] ); 
				resp.tokenid = tokenid; 
				return resp; 
			} 
			else { 
				return RET_CODES[3]; 
			} 
		} 
		catch(Throwable t) {
			def m = RET_CODES[1];
			m.message = t.message; 	
			return m; 
		}
	} 

	@ProxyMethod 
	public def consume( params ) {
		// params contains: id, barcode, tokenid 
		try { 
			if ( !params.id ) return RET_CODES[10]; 
			if ( !params.tokenid ) return RET_CODES[5]; 

			boolean is_qr = ( params.qr.toString() == '1' );
			def barcode = ( is_qr ? params.data : params.barcode );
			
			if ( !barcode ) return RET_CODES[2]; 

			def machinfo = em_turnstile_item.findTurnstile([ turnstileid: params.id ]); 
			if ( !machinfo ) return RET_CODES[10]; 

			if ( is_qr ) { 
				// 
				// handle the QRCode data from barcode 
				// 
				def qr = qrSvc.decode([ data: barcode ]); 
				if ( !qr?.objid ) throw new Exception('objid  is required in QR data'); 
				if ( !qr?.barcode ) throw new Exception('barcode  is required in QR data'); 

				barcode = qr.barcode; 
			}

			def tkinfo = em_ticket.findBarcode([ barcode: barcode, turnstileid: params.id ]); 
			if ( !tkinfo ) return RET_CODES[2]; 
			if ( tkinfo.dtused ) return RET_CODES[4]; 
			if ( !tkinfo.tokenid ) return RET_CODES[5]; 
			if ( tkinfo.voided == 1 ) return RET_CODES[6];

			if ( tkinfo.tag == tkinfo.categoryid ) {
				if ( tkinfo.tokenid == params.tokenid ) {
					em_ticket.consume([
						objid   : tkinfo.objid, 
						tokenid : params.tokenid, 
						dtused  : dateSvc.getServerDate() 
					]); 
					return RET_CODES[0]; 
				} 
				else { 
					return RET_CODES[5]; 
				} 
			} 
			else { 
				return RET_CODES[3]; 
			} 
		} 
		catch(Throwable t) {
			def resp = [:]; 
			resp.putAll( RET_CODES[1] ); 
			resp.message = t.message; 	
			return resp; 
		} 
	} 
} 